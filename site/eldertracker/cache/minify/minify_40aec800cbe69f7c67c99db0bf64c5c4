
/* common.js */

/* 1   */ var range_limit = 40;
/* 2   */ 
/* 3   */ function getLocationData(){
/* 4   */ 
/* 5   */ 	var params = {probe:"locationprobe"};
/* 6   */ 
/* 7   */ 	makeAPICall('POST','hello','getdata',params,function(res){
/* 8   */ 
/* 9   */ 		var xy = JSON.parse(res);
/* 10  */ 
/* 11  */ 		//console.log(xy[xy.length-1]);
/* 12  */ 
/* 13  */ 		current_lat = xy[xy.length-1].lat;
/* 14  */ 		current_lng = xy[xy.length-1].lng;
/* 15  */ 
/* 16  */ 		if(MyMarker) MyMarker.setMap(null);
/* 17  */ 		MyMarker = new google.maps.Marker({
/* 18  */ 		    position:new google.maps.LatLng(current_lat,current_lng),
/* 19  */ 		    animation:google.maps.Animation.BOUNCE
/* 20  */ 		});
/* 21  */ 		MyMarker.setMap(map);
/* 22  */ 
/* 23  */ 		var distance = getDistance();
/* 24  */ 
/* 25  */ 		$('#distance').empty();
/* 26  */ 		$('#distance').append("Distance from Home: "+distance+"m");
/* 27  */ 
/* 28  */ 		if(distance > range_limit){
/* 29  */ 			//alert owner
/* 30  */ 			$('#distance').css("background-color","red");
/* 31  */ 
/* 32  */ 		}else{
/* 33  */ 			$('#distance').css("background-color","rgb(64, 214, 148)");
/* 34  */ 		}
/* 35  */ 	});
/* 36  */ }
/* 37  */ 
/* 38  */ function getActivityData(){
/* 39  */ 	var params = {probe:"activityprobe"};
/* 40  */ 
/* 41  */ 	makeAPICall('POST','hello','getdata',params,function(res){
/* 42  */ 		
/* 43  */ 		var data = JSON.parse(res);
/* 44  */ 		var data_array = [];
/* 45  */ 		var timestamp_array = [];
/* 46  */ 
/* 47  */ 		//console.log(data);
/* 48  */ 
/* 49  */ 		for(var index = 0; index < data.length; index++){
/* 50  */ 			data_array.push(parseInt(data[index].TOTAL_INTERVALS));

/* common.js */

/* 51  */ 
/* 52  */ 			var timestamp = data[index].timestamp;
/* 53  */ 			timestamp = timestamp.replace("T","<br>");
/* 54  */ 
/* 55  */ 			timestamp_array.push(timestamp);
/* 56  */ 		}
/* 57  */ 
/* 58  */ 		chartInit(data_array,timestamp_array);
/* 59  */ 	});
/* 60  */ }
/* 61  */ 
/* 62  */ function getDistance(){
/* 63  */ 	return google.maps.geometry.spherical.computeDistanceBetween(MyMarker.getPosition(), HomeMarker.getPosition());
/* 64  */ }
/* 65  */ 
/* 66  */ function isNumber(n) {
/* 67  */   	return !isNaN(parseFloat(n)) && isFinite(n);
/* 68  */ }
/* 69  */ 
/* 70  */ function chartInit(arr_data,arr_axis){
/* 71  */ 	var chart1 = new Highcharts.Chart({
/* 72  */         chart: {
/* 73  */             renderTo: 'mygraph',
/* 74  */             type: 'line'
/* 75  */         },
/* 76  */         title: {
/* 77  */             text: 'Activity Graph'
/* 78  */         },
/* 79  */         xAxis: {
/* 80  */             categories: arr_axis
/* 81  */         },
/* 82  */         yAxis: {
/* 83  */             title: {
/* 84  */                 text: 'Active Level'
/* 85  */             }
/* 86  */         },
/* 87  */         series: [{
/* 88  */             name: 'User',
/* 89  */             data: arr_data
/* 90  */         }]
/* 91  */     });
/* 92  */ }
/* 93  */ 
/* 94  */ function getXAxis(length, unit){
/* 95  */ 
/* 96  */ 	var axis_vals = [];
/* 97  */ 
/* 98  */ 	for(var count = 0; count < (length-1); count++){
/* 99  */ 		axis_vals.push(length-(count+1)+unit);
/* 100 */ 	}

/* common.js */

/* 101 */ 
/* 102 */ 	axis_vals[length-1] = "now";
/* 103 */ 
/* 104 */ 	return axis_vals;
/* 105 */ }

;
/* common.js */

/* 1   */ /*
/* 2   *|  * Copyright Â© 2010 - 2012 Modo Labs Inc. All rights reserved.
/* 3   *|  *
/* 4   *|  * The license governing the contents of this file is located in the LICENSE
/* 5   *|  * file located at the root directory of this distribution. If the LICENSE file
/* 6   *|  * is missing, please contact sales@modolabs.com.
/* 7   *|  *
/* 8   *|  */
/* 9   */ 
/* 10  */ String.prototype.strip = function() {
/* 11  */     return this.replace(/^\s+/, '').replace(/\s+$/, '');
/* 12  */ }
/* 13  */ 
/* 14  */ function showTab(id) {
/* 15  */     var tabId = id+'-tab';
/* 16  */     var tabbodyId = id+'-tabbody';
/* 17  */     
/* 18  */     var tab = document.getElementById(tabId);
/* 19  */     var tabbody = document.getElementById(tabbodyId);
/* 20  */     if (!tab || !tabbody) { return; } // safety check
/* 21  */     
/* 22  */     var tabs = tab.parentNode.getElementsByTagName('li');
/* 23  */     if (!tabs) { return; } // safety check
/* 24  */     
/* 25  */     var tabBodies = tabbody.parentNode.childNodes;
/* 26  */     if (!tabBodies) { return; } // safety check
/* 27  */     
/* 28  */     // Display the tab body and hide others
/* 29  */     for (var i = 0; i < tabBodies.length; i++) {
/* 30  */         if (tabBodies[i].id == tabbodyId) {
/* 31  */             show(tabBodies[i].id);
/* 32  */         } else {
/* 33  */             hide(tabBodies[i].id);
/* 34  */         }
/* 35  */     }
/* 36  */     
/* 37  */     // Display the tab and hide others
/* 38  */     for (var i = 0; i < tabs.length; i++) {
/* 39  */         if (tabs[i].id == tabId) {
/* 40  */             addClass(tabs[i], 'active');
/* 41  */         } else {
/* 42  */             removeClass(tabs[i], 'active');
/* 43  */         }
/* 44  */     }
/* 45  */     
/* 46  */     // fake resize event in case tab body was resized while hidden 
/* 47  */     if (document.createEvent) {
/* 48  */         var e = document.createEvent('HTMLEvents');
/* 49  */         e.initEvent('resize', true, true);
/* 50  */         window.dispatchEvent(e);

/* common.js */

/* 51  */     
/* 52  */     } else if( document.createEventObject ) {
/* 53  */         var e = document.createEventObject();
/* 54  */         document.documentElement.fireEvent('onresize', e);
/* 55  */     }
/* 56  */     
/* 57  */     onDOMChange();
/* 58  */ }
/* 59  */ 
/* 60  */ function onOrientationChange() {
/* 61  */     /* the galaxy tab sends orientation change events constantly */
/* 62  */     if (typeof onOrientationChange.lastOrientation == 'undefined') {
/* 63  */         onOrientationChange.lastOrientation = null;
/* 64  */     }
/* 65  */     
/* 66  */     var newOrientation = getOrientation();
/* 67  */     
/* 68  */     if (newOrientation != onOrientationChange.lastOrientation) {
/* 69  */         rotateScreen();
/* 70  */         
/* 71  */         if (typeof onOrientationChange.callbackFunctions !== 'undefined') {
/* 72  */             for (var i = 0; i < onOrientationChange.callbackFunctions.length; i++) {
/* 73  */                 onOrientationChange.callbackFunctions[i]();
/* 74  */             }
/* 75  */         }
/* 76  */         
/* 77  */         onOrientationChange.lastOrientation = newOrientation;
/* 78  */     }
/* 79  */ }
/* 80  */ 
/* 81  */ function onResize() {
/* 82  */     if (typeof onResize.callbackFunctions !== 'undefined') {
/* 83  */         for (var i = 0; i < onResize.callbackFunctions.length; i++) {
/* 84  */             onResize.callbackFunctions[i]();
/* 85  */         }
/* 86  */     }
/* 87  */ }
/* 88  */ 
/* 89  */ function addOnOrientationChangeCallback(callback) {
/* 90  */     if (typeof onOrientationChange.callbackFunctions == 'undefined') {
/* 91  */         onOrientationChange.callbackFunctions = [];
/* 92  */     }
/* 93  */     onOrientationChange.callbackFunctions.push(callback);
/* 94  */     
/* 95  */     if (typeof onResize.callbackFunctions == 'undefined') {
/* 96  */         onResize.callbackFunctions = [];
/* 97  */     }
/* 98  */     onResize.callbackFunctions.push(callback);
/* 99  */ }
/* 100 */ 

/* common.js */

/* 101 */ function setupOrientationChangeHandlers() {
/* 102 */     if (window.addEventListener) {
/* 103 */         window.addEventListener("orientationchange", onOrientationChange, false);
/* 104 */     } else if (window.attachEvent) {
/* 105 */         window.attachEvent("onorientationchange", onOrientationChange);
/* 106 */     }
/* 107 */     if (window.addEventListener) {
/* 108 */         window.addEventListener("resize", onResize, false);
/* 109 */     } else if (window.attachEvent) {
/* 110 */         window.attachEvent("onresize", onResize);
/* 111 */     }
/* 112 */ }
/* 113 */ 
/* 114 */ function rotateScreen() {
/* 115 */   setOrientation(getOrientation());
/* 116 */   setTimeout(scrollToTop, 500);
/* 117 */ }
/* 118 */ 
/* 119 */ function getOrientation() {
/* 120 */     if (typeof getOrientation.orientationIsFlipped == 'undefined') {
/* 121 */         // detect how we are detecting orientation
/* 122 */         getOrientation.orientationIsFlipped = false;
/* 123 */         
/* 124 */         if (!('orientation' in window)) {
/* 125 */             getOrientation.orientationMethod = 'size';
/* 126 */         } else {
/* 127 */             getOrientation.orientationMethod = 'orientation';
/* 128 */             var width = document.documentElement.clientWidth || document.body.clientWidth;
/* 129 */             var height = document.documentElement.clientHeight || document.body.clientHeight;
/* 130 */             
/* 131 */             /* at this point the method of orientation detection is not perfect */
/* 132 */             if (navigator.userAgent.match(/(PlayBook.+RIM Tablet|Xoom|Android 3\.\d)/)) {
/* 133 */                 getOrientation.orientationIsFlipped = true;
/* 134 */             }
/* 135 */         }
/* 136 */     }
/* 137 */ 
/* 138 */     switch (getOrientation.orientationMethod) {
/* 139 */         case 'size':
/* 140 */             var width = document.documentElement.clientWidth || document.body.clientWidth;
/* 141 */             var height = document.documentElement.clientHeight || document.body.clientHeight;
/* 142 */ 
/* 143 */             return (width > height) ? 'landscape' : 'portrait';
/* 144 */             break;
/* 145 */ 
/* 146 */         case 'orientation':
/* 147 */             switch (window.orientation) {
/* 148 */                 case 0:
/* 149 */                 case 180:
/* 150 */                     return getOrientation.orientationIsFlipped ? 'landscape' : 'portrait';

/* common.js */

/* 151 */                     break;
/* 152 */                 
/* 153 */                 case 90:
/* 154 */                 case -90:
/* 155 */                     return getOrientation.orientationIsFlipped ? 'portrait': 'landscape';
/* 156 */                     break;
/* 157 */             }
/* 158 */     }
/* 159 */ }
/* 160 */ 
/* 161 */ function setOrientation(orientation) {
/* 162 */     var body = document.getElementsByTagName("body")[0];
/* 163 */  
/* 164 */  //remove existing portrait/landscape class if there
/* 165 */     removeClass(body, 'portrait');
/* 166 */     removeClass(body, 'landscape');
/* 167 */     addClass(body, orientation);
/* 168 */ }
/* 169 */ 
/* 170 */ // Localized ajax loading and error content
/* 171 */ // takes either an element or an id
/* 172 */ function showAjaxLoadingMsg(e) {
/* 173 */     if (typeof e == 'string') {
/* 174 */         e = document.getElementById(element);
/* 175 */     }
/* 176 */ 	if (e) {
/* 177 */ 		e.innerHTML = AJAX_CONTENT_LOADING_HTML;
/* 178 */ 	}
/* 179 */ 	onDOMChange();
/* 180 */ }
/* 181 */ 
/* 182 */ function showAjaxErrorMsg(e) {
/* 183 */     if (typeof e == 'string') {
/* 184 */         e = document.getElementById(element);
/* 185 */     }
/* 186 */ 	if (e) {
/* 187 */ 		e.innerHTML = AJAX_CONTENT_ERROR_HTML;
/* 188 */ 	}
/* 189 */ 	onDOMChange();
/* 190 */ }
/* 191 */ 
/* 192 */ function hide(strID) {
/* 193 */ // Hides the object with ID strID 
/* 194 */ 	var objToHide = document.getElementById(strID);
/* 195 */ 	if(objToHide) {
/* 196 */ 		objToHide.style.display = "none";
/* 197 */ 	}
/* 198 */ 	
/* 199 */ 	onDOMChange();
/* 200 */ }

/* common.js */

/* 201 */ 
/* 202 */ function show(strID) {
/* 203 */ // Displays the object with ID strID 
/* 204 */ 	var objToHide = document.getElementById(strID);
/* 205 */ 	if(objToHide) {
/* 206 */ 		objToHide.style.display = "block";
/* 207 */ 	}
/* 208 */ 	
/* 209 */ 	onDOMChange();
/* 210 */ }
/* 211 */ 
/* 212 */ function showHideFull(objContainer) {
/* 213 */ 	var strClass = objContainer.className;
/* 214 */ 	if(strClass.indexOf("collapsed") > -1) {
/* 215 */ 		strClass = strClass.replace("collapsed","expanded");
/* 216 */ 	} else {
/* 217 */ 		strClass = strClass.replace("expanded","collapsed");
/* 218 */ 	}
/* 219 */ 	objContainer.className = strClass;
/* 220 */ 	objContainer.blur();
/* 221 */ 	
/* 222 */ 	onDOMChange();
/* 223 */ }
/* 224 */ 
/* 225 */ function clearField(objField,strDefault) {
/* 226 */ // Clears the placeholder text in an input field if it matches the default string - fixes a bug in Android
/* 227 */ 	if((objField.value==strDefault) || (objField.value=="")) {
/* 228 */ 		objField.value="";
/* 229 */ 	}
/* 230 */ }
/* 231 */ 
/* 232 */ // Android doesn't respond to onfocus="clearField(...)" until the 
/* 233 */ // input field loses focus
/* 234 */ function androidPlaceholderFix(searchbox) {
/* 235 */     // this forces the search box to display the empty string
/* 236 */     // instead of the place holder when the search box takes focus
/* 237 */     if (searchbox.value == "") {
/* 238 */         searchbox.value = "";
/* 239 */     }
/* 240 */ }
/* 241 */ 
/* 242 */ function getCookie(name) {
/* 243 */   var cookie = document.cookie;
/* 244 */   var result = "";
/* 245 */   var start = cookie.indexOf(name + "=");
/* 246 */   if (start > -1) {
/* 247 */     start += name.length + 1;
/* 248 */     var end = cookie.indexOf(";", start);
/* 249 */     if (end < 0) {
/* 250 */       end = cookie.length;

/* common.js */

/* 251 */     }
/* 252 */     result = unescape(cookie.substring(start, end));
/* 253 */   }
/* 254 */   return result;
/* 255 */ }
/* 256 */ 
/* 257 */ function setCookie(name, value, expireseconds, path) {
/* 258 */   var exdate = new Date();
/* 259 */   exdate.setTime(exdate.getTime() + (expireseconds * 1000));
/* 260 */   var exdateclause = (expireseconds == 0) ? "" : "; expires=" + exdate.toGMTString();
/* 261 */   var pathclause = (path == null) ? "" : "; path=" + path;
/* 262 */   document.cookie = name + "=" + escape(value) + exdateclause + pathclause;
/* 263 */ }
/* 264 */ 
/* 265 */ function getCookieArrayValue(name) {
/* 266 */   var value = getCookie(name);
/* 267 */   if (value && value.length) {
/* 268 */     return value.split('@@');
/* 269 */   } else {
/* 270 */     return new Array();
/* 271 */   }
/* 272 */ }
/* 273 */ 
/* 274 */ function setCookieArrayValue(name, values, expireseconds, path) {
/* 275 */   var value = '';
/* 276 */   if (values && values.length) {
/* 277 */     value = values.join('@@');
/* 278 */   }
/* 279 */   setCookie(name, value, expireseconds, path);
/* 280 */ }
/* 281 */ 
/* 282 */ function hasClass(ele,cls) {
/* 283 */     return ele.className.match(new RegExp('(\\s|^)'+cls+'(\\s|$)'));
/* 284 */ }
/* 285 */         
/* 286 */ function addClass(ele,cls) {
/* 287 */     if (!this.hasClass(ele,cls)) ele.className += " "+cls;
/* 288 */ }
/* 289 */ 
/* 290 */ function removeClass(ele,cls) {
/* 291 */     if (hasClass(ele,cls)) {
/* 292 */         var reg = new RegExp('(\\s|^)'+cls+'(\\s|$)');
/* 293 */         ele.className=ele.className.replace(reg,' ').strip();
/* 294 */     }
/* 295 */ }
/* 296 */         
/* 297 */ function toggleClass(ele, cls) {
/* 298 */     if (hasClass(ele, cls)) {
/* 299 */         removeClass(ele, cls);
/* 300 */     } else {

/* common.js */

/* 301 */         addClass(ele, cls);
/* 302 */     }
/* 303 */ }
/* 304 */ 
/* 305 */ // Share-related functions
/* 306 */ function showShare() {
/* 307 */     var sharesheet = document.getElementById("sharesheet");
/* 308 */     if (!sharesheet) {
/* 309 */         return;
/* 310 */     }
/* 311 */     if (!sharesheet.parentNode || sharesheet.parentNode.nodeName != 'BODY') {
/* 312 */         var elements = document.getElementsByTagName('body');
/* 313 */         if (elements.length) {
/* 314 */             var body = elements[0];
/* 315 */             body.appendChild(sharesheet);
/* 316 */         }
/* 317 */     }
/* 318 */     sharesheet.style.display="block";
/* 319 */     var iframes = document.getElementsByTagName('iframe');
/* 320 */     for (var i=0; i<iframes.length; i++) {
/* 321 */         iframes[i].style.visibility = 'hidden';
/* 322 */         iframes[i].style.height = '0';
/* 323 */     }
/* 324 */     window.scrollTo(0,0);
/* 325 */ }
/* 326 */ function hideShare() {
/* 327 */     if (!document.getElementById("sharesheet")) {
/* 328 */         return;
/* 329 */     }
/* 330 */ 	document.getElementById("sharesheet").style.display="none";
/* 331 */ 	var iframes = document.getElementsByTagName('iframe');
/* 332 */ 	for (var i=0; i<iframes.length; i++) {
/* 333 */ 	    iframes[i].style.visibility = 'visible';
/* 334 */ 	    iframes[i].style.height = '';
/* 335 */ 	}
/* 336 */ }
/* 337 */ 
/* 338 */ // Bookmarks
/* 339 */ function toggleBookmark(name, item, expireseconds, path, bookmarkId) {
/* 340 */   // facility for module to respond to bookmark state change
/* 341 */   if (typeof moduleBookmarkWillToggle != 'undefined') {
/* 342 */     $result = moduleBookmarkWillToggle(name, item, expireseconds, path);
/* 343 */     if ($result === false) { return; }
/* 344 */   }
/* 345 */ 
/* 346 */   if (!bookmarkId) {
/* 347 */     bookmarkId = "bookmark";
/* 348 */   }
/* 349 */   var bookmark = document.getElementById(bookmarkId);
/* 350 */   toggleClass(bookmark, "on");

/* common.js */

/* 351 */   var items = getCookieArrayValue(name);
/* 352 */   var newItems = new Array();
/* 353 */   if (items.length == 0) {
/* 354 */     newItems[0] = item;
/* 355 */   } else {
/* 356 */     var found = false;
/* 357 */     for (var i = 0; i < items.length; i++) {
/* 358 */       if (items[i] == item) {
/* 359 */         found = true;
/* 360 */       } else {
/* 361 */         newItems.push(items[i]);
/* 362 */       }
/* 363 */     }
/* 364 */     if (!found) {
/* 365 */       newItems.push(item);
/* 366 */     }
/* 367 */   }
/* 368 */   setCookieArrayValue(name, newItems, expireseconds, path);
/* 369 */   
/* 370 */   // facility for module to respond to bookmark state change
/* 371 */   if (typeof moduleBookmarkToggled != 'undefined') {
/* 372 */     moduleBookmarkToggled(name, item, expireseconds, path);
/* 373 */   }
/* 374 */ }
/* 375 */ 
/* 376 */ // TODO this needs to handle encoded strings and parameter separators (&amp;)
/* 377 */ if (typeof makeAPICall === 'undefined' && typeof jQuery === 'undefined') {
/* 378 */   function makeAPICall(type, module, command, data, callback) {
/* 379 */     var urlParts = [];
/* 380 */     for (var param in data) {
/* 381 */       urlParts.push(param + "=" + data[param]);
/* 382 */     }
/* 383 */     url = URL_BASE + API_URL_PREFIX + '/' + module + '/' + command + '?' + urlParts.join('&');
/* 384 */     var handleError = function(errorObj) {}
/* 385 */ 
/* 386 */     var httpRequest = new XMLHttpRequest();
/* 387 */     httpRequest.open("GET", url, true);
/* 388 */     httpRequest.onreadystatechange = function() {
/* 389 */       if (httpRequest.readyState == 4 && httpRequest.status == 200) {
/* 390 */         var obj;
/* 391 */         if (window.JSON) {
/* 392 */             obj = JSON.parse(httpRequest.responseText);
/* 393 */             // TODO: catch SyntaxError
/* 394 */         } else {
/* 395 */             obj = eval('(' + httpRequest.responseText + ')');
/* 396 */         }
/* 397 */         if (obj !== undefined) {
/* 398 */           if ("response" in obj) {
/* 399 */             callback(obj["response"]);
/* 400 */           }

/* common.js */

/* 401 */ 
/* 402 */           if ("error" in obj && obj["error"] !== null) {
/* 403 */             handleError(obj["error"]);
/* 404 */           } else {
/* 405 */             handleError("response not found");
/* 406 */           }
/* 407 */         } else {
/* 408 */           handleError("failed to parse response");
/* 409 */         }
/* 410 */       }
/* 411 */     }
/* 412 */     httpRequest.send(null);
/* 413 */   }
/* 414 */ }
/* 415 */ 
/* 416 */ function ajaxContentIntoContainer(options) {
/* 417 */     if (typeof options != 'object') { return; } // safety
/* 418 */     
/* 419 */     if (typeof ajaxContentIntoContainer.pendingRequests == 'undefined') {
/* 420 */         ajaxContentIntoContainer.pendingRequests = new Array();
/* 421 */     }
/* 422 */     
/* 423 */     var _removeRequestsForContainer = function (container) {
/* 424 */         // go backwards so removing items doesn't cause us to skip requests
/* 425 */         for (var i = ajaxContentIntoContainer.pendingRequests.length-1; i >= 0; i--) {
/* 426 */             if (ajaxContentIntoContainer.pendingRequests[i].options.container == container) {
/* 427 */                 ajaxContentIntoContainer.pendingRequests[i].httpRequest.abort();
/* 428 */                 ajaxContentIntoContainer.pendingRequests.splice(i, 1);
/* 429 */             }
/* 430 */         }
/* 431 */     }
/* 432 */     
/* 433 */     var _removeCompletedRequest = function (httpRequest) {
/* 434 */         for (var i = 0; i < ajaxContentIntoContainer.pendingRequests.length; i++) {
/* 435 */             if (ajaxContentIntoContainer.pendingRequests[i].httpRequest == httpRequest) {
/* 436 */                 ajaxContentIntoContainer.pendingRequests.splice(i, 1);
/* 437 */                 break;
/* 438 */             }
/* 439 */         }
/* 440 */     }
/* 441 */    
/* 442 */     var defaults = {
/* 443 */         url: null, 
/* 444 */         container: null, 
/* 445 */         timeout: 60, 
/* 446 */         addAjaxParameter: true,
/* 447 */         loadMessage: true,
/* 448 */         errorMessage: true,
/* 449 */         success: function () {},
/* 450 */         error: function (code) {} 

/* common.js */

/* 451 */     };
/* 452 */     for (var i in defaults) {
/* 453 */         if (typeof options[i] == 'undefined') {
/* 454 */             options[i] = defaults[i];
/* 455 */         }
/* 456 */     }
/* 457 */     if (!options.url || !options.container) { return; } // safety
/* 458 */     
/* 459 */     if (options.addAjaxParameter && options.url.search(/[\?\&]ajax=/) < 0) {
/* 460 */         options.url += (options.url.search(/\?/) < 0 ? "?" : "&")+"ajax=1";
/* 461 */     }
/* 462 */     
/* 463 */     _removeRequestsForContainer(options.container);
/* 464 */     
/* 465 */     var httpRequest = new XMLHttpRequest();
/* 466 */     httpRequest.open("GET", options.url, true);
/* 467 */     
/* 468 */     var requestTimer = setTimeout(function() {
/* 469 */         // some browsers set readyState to 4 on abort so remove handler first
/* 470 */         httpRequest.onreadystatechange = function() { };
/* 471 */         httpRequest.abort();
/* 472 */         
/* 473 */         options.error(408); // http request timeout status code
/* 474 */     }, options.timeout * 1000);
/* 475 */     
/* 476 */     httpRequest.onreadystatechange = function() {
/* 477 */         // return if still in progress
/* 478 */         if (httpRequest.readyState != 4) { return; }
/* 479 */         
/* 480 */         // Got answer, don't abort
/* 481 */         clearTimeout(requestTimer);
/* 482 */         
/* 483 */         if (httpRequest.status == 200) { // Success
/* 484 */             options.container.innerHTML = "";
/* 485 */             
/* 486 */             insertContentIntoContainer({
/* 487 */                 "container" : options.container,
/* 488 */                 "html"      : httpRequest.responseText
/* 489 */             });
/* 490 */             
/* 491 */             options.success();
/* 492 */             
/* 493 */         } else {
/* 494 */             if (options.errorMessage) {
/* 495 */                 showAjaxErrorMsg(options.container);
/* 496 */             }
/* 497 */             options.error(httpRequest.status);
/* 498 */         }
/* 499 */         
/* 500 */         _removeCompletedRequest(httpRequest);

/* common.js */

/* 501 */     };
/* 502 */     
/* 503 */     if (options.loadMessage) {
/* 504 */         showAjaxLoadingMsg(options.container);
/* 505 */     }
/* 506 */     
/* 507 */     httpRequest.send(null);
/* 508 */     
/* 509 */     ajaxContentIntoContainer.pendingRequests.push({
/* 510 */         'options'     : options,
/* 511 */         'httpRequest' : httpRequest
/* 512 */     });
/* 513 */ }
/* 514 */ 
/* 515 */ function insertContentIntoContainer(options) {
/* 516 */     if (typeof options != 'object') { return; } // safety
/* 517 */ 
/* 518 */     var defaults = {
/* 519 */         html: null, 
/* 520 */         container: null, 
/* 521 */     };
/* 522 */     for (var i in defaults) {
/* 523 */         if (typeof options[i] == 'undefined') {
/* 524 */             options[i] = defaults[i];
/* 525 */         }
/* 526 */     }
/* 527 */     if (!options.html || !options.container) { return; } // safety
/* 528 */ 
/* 529 */     // innerHTML outside of DOM hierarchy to avoid drawing issues
/* 530 */     var div = document.createElement("div");
/* 531 */     div.innerHTML = options.html;
/* 532 */     
/* 533 */     // copy elements so we can move them without the list changing
/* 534 */     var children = [];
/* 535 */     for (var i = 0; i < div.childNodes.length; i++) {
/* 536 */         children.push(div.childNodes[i]);
/* 537 */     }
/* 538 */     
/* 539 */     // Manually appendChild elements so scripts get evaluated
/* 540 */     for (var i = 0; i < children.length; i++) {
/* 541 */         if (children[i].nodeName == "SCRIPT") {
/* 542 */             // must clone script tags or they won't get executed
/* 543 */             document.body.appendChild(children[i].cloneNode(true));
/* 544 */             
/* 545 */         } else if (children[i].nodeName == "STYLE") {
/* 546 */             // clone styles in case some browsers treat them like scripts
/* 547 */             document.getElementsByTagName("head")[0].appendChild(children[i].cloneNode(true));
/* 548 */             
/* 549 */         } else {
/* 550 */             // don't clone anything else because browser may have already started 

/* common.js */

/* 551 */             // loading assets associated with this element (e.g. img src)
/* 552 */             options.container.appendChild(children[i]);
/* 553 */         }
/* 554 */     }
/* 555 */ }
/* 556 */ 
/* 557 */ function getCSSValue(element, key) {
/* 558 */     if (window.getComputedStyle) {
/* 559 */         return document.defaultView.getComputedStyle(element, null).getPropertyValue(key);
/* 560 */         
/* 561 */     } else if (element.currentStyle) {
/* 562 */         if (key == 'float') { 
/* 563 */             key = 'styleFloat'; 
/* 564 */         } else {
/* 565 */             var re = /(\-([a-z]){1})/g; // hyphens to camel case
/* 566 */             if (re.test(key)) {
/* 567 */                 key = key.replace(re, function () {
/* 568 */                     return arguments[2].toUpperCase();
/* 569 */                 });
/* 570 */             }
/* 571 */         }
/* 572 */         return element.currentStyle[key] ? element.currentStyle[key] : null;
/* 573 */     }
/* 574 */     return '';
/* 575 */ }
/* 576 */ 
/* 577 */ function getCSSHeight(element) {
/* 578 */     return element.offsetHeight
/* 579 */         - parseFloat(getCSSValue(element, 'border-top-width')) 
/* 580 */         - parseFloat(getCSSValue(element, 'border-bottom-width'))
/* 581 */         - parseFloat(getCSSValue(element, 'padding-top'))
/* 582 */         - parseFloat(getCSSValue(element, 'padding-bottom'));
/* 583 */ }
/* 584 */ 
/* 585 */ function _getStringForArgs(args) {
/* 586 */     var argString = "";
/* 587 */     if (typeof args == "string" && args.length) {
/* 588 */         argString = "?" + args;
/* 589 */     } else if (typeof args == "object") {
/* 590 */         for (var param in args) {
/* 591 */             argString += (argString.length ? "&" : "?") + 
/* 592 */                 param + "=" + encodeURIComponent(args[param]);
/* 593 */         }
/* 594 */     }
/* 595 */     return argString;    
/* 596 */ }
/* 597 */ 
/* 598 */ function redirectTo(page, args) {
/* 599 */     window.location = "./" + page + _getStringForArgs(args);
/* 600 */ }

/* common.js */

/* 601 */ 
/* 602 */ function redirectToModule(module, page, args) {
/* 603 */     window.location = "../" + module + "/" + page + _getStringForArgs(args);
/* 604 */ }
/* 605 */ 
